version: "3.9"

# We want to spawn several separate services from Docker images and manage all
# of them from this file.
services:

  ##############################################################################
  #
  # Proxy
  #   We use Nginx as a reverse proxy to direct requests to the ports of the
  #   correct services. This way we can hide the application's inner network.
  #
  ##############################################################################
  proxy:
    container_name: shuffle.proxy.production

    # We can use the latest version of Nginx.
    image: nginx:1.25.4-alpine

    # We want to expose at port 8010.
    ports:
      - 8010:80

    # We can use volumes to copy our reverse proxy configuration into Nginx.
    volumes:
      # Use the production configuration to expose only what's necessary.
      - ./proxy/production.conf:/etc/nginx/nginx.conf
      - ./proxy/logs:/etc/nginx/error_log.log

      # Temporary line to help Nginx serve the static files.
      - ./client/static:/usr/share/nginx/html

    # The proxy needs access to the publicly accessible services.
    depends_on:
      - client
      - api

  ##############################################################################
  #
  # Client
  #   This is the service that serves all client-side files.
  #
  ##############################################################################
  client:
    container_name: shuffle.client.production

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the production dockerfile in the client directory.
    build:
      context: ./client/
      dockerfile: production.dockerfile

    # Pass on the environment variables to the client service.
    environment:
      # Tell the client where to reach the client and the API.
      - API_URL=http://localhost:8010/api/
      - CLIENT_URL=http://localhost:8010/
      - PORT=80

    # We can expose the client service in the container network.
    expose:
      - "80"

  ##############################################################################
  #
  # API
  #   This is the service that serves all server-side requests.
  #
  ##############################################################################
  api:
    container_name: shuffle.api.production

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the production dockerfile in the API directory.
    build:
      context: ./api/
      dockerfile: production.dockerfile

    # The api will need to some hosting information. Any external information
    # that is not set in this file is expected to be supplied through
    # environment variables.
    environment:
      # Tell the API where to reach the client and the API.
      - API_URL=http://localhost:8010/api/
      - CLIENT_URL=http://localhost:8010/

    # We can expose the api service in the container network.
    expose:
      - "80"
